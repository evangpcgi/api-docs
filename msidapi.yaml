openapi: 3.0.3
info:
  title: MSID Management API
  description: API for reading, inserting, and updating MSID Pair records and their allocation to SBMUs.
  version: 1.0.0

paths:
  /read:
    post:
      summary: /Read Endpoint
      description: |
        Retrieve existing Msids in the system given the filter criteria (*mandatory **conditional):
        1. partyID * (Party ID as shown in Account Info)
        2. username * (Email of authorized signatory/contact)
        3. partyAPIKey * (Key as received in email after requesting party key)
        4. MsidAmsidRequestID (Batch request ID from a previous Insert or Update operation)
        5. pendingFlag (Filter by status code D, P, PA, S, R)
        6. SVABMUnit ** (Must be an existing SVA BM unit. Required when pendingFlag â‰  R without a MsidAmsidRequestID)
        7. effectiveFromDate ** (required when SVABMUnit populated) 
        8. effectiveToDate ** (required when SVABMUnit populated) 
        9. lastModifiedDate (Can be used with any pendingFlag. Helps refine large result sets near the 5,000-record limit)
                  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ReadCase1'
                - $ref: '#/components/schemas/ReadCase2'
                - $ref: '#/components/schemas/ReadCase3'
                - $ref: '#/components/schemas/ReadCase4'
      responses:
        '200':
          description: List of MSIDs matching filters
          content:
            application/json:
              schema:
                type: object
                example:                  
                    SVA_BM_Unit: V__AFLEX001
                    Pending_Flag: S
                    MSID_Pair_ID: a0sAe000001xJvhIAE
                    Last_Modified_Date: '2025-07-02 14:39:47'
                    Import_Reject_Reasons: ''
                    Import_Metering_System: '4883772918844'
                    GSP_Group: _P
                    Export_Reject_Reasons: ''
                    Export_Metering_System: ''
                    Effective_To_Settlement_Date: 02/07/2025
                    Effective_From_Settlement_Date: 29/04/2025
        '400':
          description: Bad Request - Invalid parameters or limits reached
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidParameters'
                  - $ref: '#/components/schemas/LimitErrorReached'
                  - $ref: '#/components/schemas/PayloadLimit'                  
        '403':
          $ref: '#/components/responses/AuthorizationError'

        '401':
          $ref: '#/components/responses/SessionExpiredError'  

  /insert:
    post:
      summary: /Insert Endpoint
      description: |
        Comma Separated Values string with MSID data fields in order (*)mandatory:
        1. BMUnitID (max 11 chars) *
        2. GSPGroup (2 chars) *
        3. Effective From Settlement Date {MSIDP} (DD/MM/YYYY) *
        4. Effective To Settlement Date {MSIDP} (DD/MM/YYYY) *
        5. Import MSID (13 chars) *
        6. Import MSID Customer Consent Flag (Y/N) *
        7. Effective From Settlement Date {ICEFD} (DD/MM/YYYY) *
        8. Effective To Settlement Date {ICETD} (DD/MM/YYYY) *
        9. Export MSID (13 chars)
        10. Export MSID Customer Consent Flag (Y/N)
        11. Effective From Settlement Date {ECEFD} (DD/MM/YYYY)
        12. Effective To Settlement Date {ECETD} (DD/MM/YYYY)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertRequest'
      responses:
        '200':
          description: MSIDs processed successfully and accepted
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "Accepted"
                  requestId: "FLEXTRCY_MSID-PAIR-ALLOC-CREATE_20250331151154"
        '202':
          description: Partial success with errors
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "Accepted_with_errors"
                  MSIDAMSIDRequestId: "FLEXTRCY_MSID-PAIR-ALLOC-CREATE_20250331151154"
                  errors:
                    - row: "1"
                      data: "The MSID Pair Effective From Date must be at least 1 Working Day in the future."
        '400':
          description: Bad Request - Invalid parameters or limits reached
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InsertSchemaValidation'
                  - $ref: '#/components/schemas/InsertBusinessValidation'
                  - $ref: '#/components/schemas/InvalidParameters'
                  - $ref: '#/components/schemas/LimitErrorReached'
                  - $ref: '#/components/schemas/PayloadLimit'
                  - $ref: '#/components/schemas/PayloadDatesLimit'
        '403':
          $ref: '#/components/responses/AuthorizationError'

        '401':
          $ref: '#/components/responses/SessionExpiredError'  

  /update:
    post:
      summary: /Update Endpoint 
      description: |
        Comma Separated Values string with MSID data fields in order (*)mandatory:
        
        Effective to Settlement Date
        1. MSIDPairID (Unique Kinnect Customer Solutions portal ID for the MSID Pair) *        
        2. Effective To Settlement Date {MSIDP} (DD/MM/YYYY) *
        
        Consent Information
        1. MSIDPairID (Unique Kinnect Customer Solutions portal ID for the MSID Pair) *
        2. MSID (Import or Export MSID associated with the MSID Pair) *
        3. CustomerConsentFlag (Consent status Y/N) *        
        4. ConsentEffectiveFromDate (Date from which consent is effective) *        
        5. FlowDirection (Import/Export) * 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UpdateMSIDETD'
                - $ref: '#/components/schemas/UpdateConsentFlag'
      responses:
        '200':
          description: MSIDs updated successfully
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "Accepted"
                  MSIDAMSIDRequestId: "FLEXTRCY_MSID-PAIR-ALLOC-UPDATE_20250331151154"
        '202':
          description: Partial success with errors
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "Accepted_with_errors"
                  MSIDAMSIDRequestId: "FLEXTRCY_MSID-PAIR-ALLOC-UPDATE_20250331151154"
                  errors:
                    - row: "1"
                      data: "MSID Pair must be in Pending Status 'S'"
        '400':
          description: Bad Request - Invalid parameters or limits reached
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UpdateSchemaValidation'
                  - $ref: '#/components/schemas/UpdateETDBusinessValidation'
                  - $ref: '#/components/schemas/UpdateConsentFlagBusinessValidation'
                  - $ref: '#/components/schemas/InvalidParameters'
                  - $ref: '#/components/schemas/LimitErrorReached'
                  - $ref: '#/components/schemas/PayloadLimit'
        '401':
          $ref: '#/components/responses/SessionExpiredError'

        '403':
          $ref: '#/components/responses/AuthorizationError' 

components:
  schemas:
    # ---------- Error Schemas ----------
    InvalidParameters:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Invalid parameters, please check the API documentation"

    LimitErrorReached:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Wrong Payload: Maximum number of row errors reached (stored_parameter_number 500)"

    PayloadLimit:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Payload too large, exceeded maximum number of records allowed in Update API"
        
    PayloadDatesLimit:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Payload too large, exceeded maximum number of records allowed in Create API"
     
    InsertSchemaValidation:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Incorrect field length: GSP Group."
        
    InsertBusinessValidation:
      type: object
      properties:
        message:
          type: string
      example:
        message: "The MSID Pair GSP Group must be in the same GSP Group of the associated BM Unit."

    UpdateSchemaValidation:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Incorrect field length: MSID Pair ID."
        
    UpdateETDBusinessValidation:
      type: object
      properties:
        message:
          type: string
      example:
        message: "MSID Pair records cannot be changed to a later Effective To Date."

    UpdateConsentFlagBusinessValidation:
      type: object
      properties:
        message:
          type: string
      example:
        message: "MSID Pair must be in Pending Status 'S'."
    
    AuthorizationError:
      type: object
      properties:
        message:
          type: string
      example:
        message: "The provided username and partyID combination is not authorized."

    SessionExpiredError:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Session expired or invalid."
    
    InvalidEndpoint:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Invalid endpoint. Accepted endpoints are: Read, Insert, Update"

    # ---------- Read Request Schemas ----------
    ReadCase1:
      type: object
      required: [partyID, username, partyAPIKey]
      properties:
        partyID:
          type: string
          example: "ALEXTRCI"
          maxLength: 8
        username:
          type: email
          example: "email.api@yaml.com"
        partyAPIKey:
          type: string
          example: "68zUNyKoprbKt7ymLN6E/Q=="
        MsidAmsidRequestID:
          type: string
          maxLength: 100
          example: "ALEXTRCI_MSID-PAIR-ALLOC-CREATE_20250804155244"    
    
    ReadCase2:
      type: object
      required: [partyID, username, partyAPIKey]
      properties:
        partyID:
          type: string
          example: "ALEXTRCI"
          maxLength: 8
        username:
          type: email
          example: "email.api@yaml.com"
        partyAPIKey:
          type: string
          example: "68zUNyKoprbKt7ymLN6E/Q=="        
        pendingFlag:
          type: string
          enum: [R]
          example: "R"
     
    ReadCase3:
      type: object
      required: [partyID, username, partyAPIKey, SVABMUnit, effectiveFromDate, effectiveToDate]
      properties:
        partyID:
          type: string
          example: "ALEXTRCI"
          maxLength: 8
        username:
          type: email
          example: "email.api@yaml.com"
        partyAPIKey:
          type: string
          example: "68zUNyKoprbKt7ymLN6E/Q=="                
        SVABMUnit:
          type: string
          maxLength: 11
          example: "V__AFLEX002"
        effectiveFromDate:
          type: string
          pattern: '^\d{8}$'
          example: "01/08/2025"
        effectiveToDate:
          type: string
          pattern: '^\d{8}$'
          example: "30/08/2025"
    
    ReadCase4:
      type: object
      required: [partyID, username, partyAPIKey, SVABMUnit, effectiveFromDate, effectiveToDate]
      properties:
        partyID:
          type: string
          example: "ALEXTRCI"
          maxLength: 8
        username:
          type: email
          example: "email.api@yaml.com"
        partyAPIKey:
          type: string
          example: "68zUNyKoprbKt7ymLN6E/Q=="                
        pendingFlag:
          type: string
          enum: [D,P,PA,S]          
          example: "S"
        SVABMUnit:
          type: string
          maxLength: 11
          example: "V__AFLEX002"
        effectiveFromDate:
          type: string
          pattern: '^\d{8}$'
          example: "01/08/2025"
        effectiveToDate:
          type: string
          pattern: '^\d{8}$'
          example: "30/08/2025"
          
    # ---------- Insert Request Schema ----------
    InsertRequest:
      type: object
      required: [partyID, username, partyAPIKey, MsidAmsidsToInsert]
      properties:
        partyID:
          type: string
          example: "ALEXTRCI"
          maxLength: 8
        username:
          type: email
          example: "email.api@yaml.com"
        partyAPIKey:
          type: string
          example: "68zUNyKoprbKt7ymLN6E/Q=="
        MsidAmsidsToInsert:
          type: array
          items:
            type: object
            properties:
              row:
                type: string
                description: "Row index"                
              data:
                type: string
                description: "BMUnitID,GSPGroup,MSIDP,MSIDP,ImportMSID,ImportConsentFlag,ICEFD,ICETD,ExportMSID,ExportConsentFlag,ECEFD,ECETD"                                  
            example: [
              {"row": "1", "data": "V__AFLEX002,_A,02/09/2025,20/10/2025,1800061146877,Y,02/09/2025,20/10/2025,1800061146886,Y,02/09/2025,20/10/2025"},
              {"row": "2", "data": "V__AFLEX002,_A,02/09/2025,20/10/2025,1800061146877,Y,02/09/2025,20/10/2025,,,,"}
            ]     

    # ---------- Update Request Schemas ----------
    UpdateMSIDETD:
      title: "Update MSID ETD"
      type: object
      required: [partyID, username, partyAPIKey, MsidAmsidsToUpdate]
      properties:
        partyID:
          type: string
          example: "ALEXTRCI"
          maxLength: 8
        username:
          type: email
          example: "email.api@yaml.com"
        partyAPIKey:
          type: string
          example: "68zUNyKoprbKt7ymLN6E/Q=="
        MsidAmsidsToUpdate:
          type: array
          items:
            type: object
            properties:
              row:
                type: string
                description: "Row index"
              data:
                type: string
                description: "MSIDId,EffectiveToSettlementDate"
            example: [
              {"row": "1", "data": "a0sAe000002GIr3HAG,10/10/2025"},
              {"row": "2", "data": "a0sAe000002GIr3IAG,11/10/2025"}
            ]

    UpdateConsentFlag:
      title: "Update MSID Consent Flag"
      type: object
      required: [partyID, username, partyAPIKey, ConsentFlagsToUpdate]
      properties:
        partyID:
          type: string
          maxLength: 8
          example: "ALEXTRCI"
        username:
          type: email
          example: "email.api@yaml.com"
        partyAPIKey:
          type: string
          example: "68zUNyKoprbKt7ymLN6E/Q=="
        ConsentFlagsToUpdate:
          type: array
          items:
            type: object
            properties:
              row:
                type: string
                description: "Row index"
              data:
                type: string
                description: "MSIDId,MPAN,ConsentFlag,ConsentEffectiveFromDate,FlowDirection"                
            example: [
              {"row": "1", "data": "a0sAe000002GIr3HAG,1900071112273,N,10/10/2025,Import"},
              {"row": "2", "data": "a0sAe000002GIr3HAG,1900071112273,N,10/10/2025,Export"}
            ]

  responses:
    AuthorizationError:
      description: Authorization failure (invalid API key or unauthorized username)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorizationError'

    SessionExpiredError:
      description: Session expired or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorizationError'        
